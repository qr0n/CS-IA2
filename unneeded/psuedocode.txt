CALL PROCEDURE main
END PROCEDURE

DEFINE MAX_ITEM_NAME_LENGTH 20
DEFINE MAX_USERNAME_LENGTH 20
DEFINE MAX_PASSWORD_LENGTH 20

STRUCT MenuItem
    CHAR ARRAY name
    INTEGER price
    INTEGER quantity

STRUCT SalesRecord
    CHAR ARRAY item
    INTEGER price
    INTEGER quantity

PROCEDURE main
    CHAR i_username[MAX_USERNAME_LENGTH]
    CHAR i_password[MAX_PASSWORD_LENGTH]
    INT option

    REPEAT
        PRINT("Welcome to the York Castle canteen POS")
        PRINT("Enter 1 to login or 2 to make one.")
        INPUT(option)

        // Consume the newline character from the input buffer
        GETCHAR()

        // Check if the input option is valid
        IF option IS NOT 1 AND option IS NOT 2 THEN
            PRINT("Not a valid option. Please try again.")
        END IF
    UNTIL option IS 1 OR option IS 2

    SWITCH option
        CASE 1:
            PRINT("Please enter username")
            INPUT(i_username)
            PRINT("Please enter password")
            INPUT(i_password)

            IF CALL FUNCTION login WITH ARGUMENTS i_username, i_password THEN
                // PRINT("Welcome, " + i_username)
                CALL PROCEDURE CLI WITH ARGUMENTS i_username, 1
            ELSE
                // PRINT("Please check credentials and ensure your userfile exists")
            END IF
            BREAK

        CASE 2:
            CALL PROCEDURE makeUser
            CALL PROCEDURE CLI WITH ARGUMENTS "", 0
            BREAK

        DEFAULT:
            // PRINT("Not right.")
            BREAK
    END SWITCH
END PROCEDURE

PROCEDURE login(username, password)
    IF CALL PROCEDURE credentialsExist WITH ARGUMENTS username, password THEN
        RETURN 1
    ELSE
        RETURN 0

PROCEDURE CLI(username, reinit)
    INT i_operation

    IF reinit THEN
        PRINT("Welcome " + username + ", what would you like to do today?")
    END IF

    PRINT("[1] Get the current menu")
    PRINT("[2] Add an item to the menu")
    PRINT("[3] Search the menu for a specific item")
    PRINT("[4] Sell an item")
    PRINT("[5] Calculate amount of item sold")
    PRINT("[6] Exit the program")
    PRINT("Please enter the number correlated to your option of choice.")
    INPUT(i_operation)

    // Consume the newline character from the input buffer
    GETCHAR()

    SWITCH i_operation
        CASE 1:
            CALL PROCEDURE getMenu
            CALL PROCEDURE CLI WITH ARGUMENTS "", 0
            BREAK

        CASE 2:
            CALL PROCEDURE addToMenu
            CALL PROCEDURE CLI WITH ARGUMENTS "", 0
            BREAK

        CASE 3:
            INT result = CALL FUNCTION searchMenu
            IF result IS -1 THEN
                PRINT("Failed to open menu file.")
            ELSE
                // Handle successful result
            END IF
            CALL PROCEDURE CLI WITH ARGUMENTS "", 0
            BREAK

        CASE 4:
            CALL PROCEDURE sellItem 
            CALL PROCEDURE CLI WITH ARGUMENTS "", 0
            BREAK

        CASE 5:
            CALL PROCEDURE calculateSoldItem
            CALL PROCEDURE CLI WITH ARGUMENTS "", 0
            BREAK

        CASE 6:
            // Exiting the program
            BREAK

        DEFAULT:
            PRINT("Error invalid input, please pick another (1-6)")
            CALL PROCEDURE CLI WITH ARGUMENTS "", 0
            BREAK
    END SWITCH
END PROCEDURE

PROCEDURE isValidInt(input)
    INT length = LENGTH OF input
    FOR i = 0 TO length - 1
        IF input[i] < '0' OR input[i] > '9' THEN
            RETURN 0 // Not a valid integer
        END IF
    END FOR
    RETURN 1 // Valid integer
END PROCEDURE

PROCEDURE isValidCredentials(username, password)
    RETURN (LENGTH OF username > 4 AND LENGTH OF username <= MAX_USERNAME_LENGTH AND
            LENGTH OF password > 4 AND LENGTH OF password <= MAX_PASSWORD_LENGTH)
END PROCEDURE

PROCEDURE credentialsExist(username, password)
    IF NOT CALL FUNCTION isValidCredentials WITH ARGUMENTS username, password THEN
        PRINT("Invalid credentials. Username and password must not be empty and should be less than or equal to " + MAX_USERNAME_LENGTH + " characters.")
        RETURN 0
    END IF

    CHAR user[50]
    CHAR pass[20]
    CHAR fp[40]
    SPRINTF(fp, "%s/%s.txt", "F:/projects/compsci/db/users", username)

    userdb = FOPEN(fp, "r")
    IF userdb IS NULL THEN
        PRINT("Error opening user file")
        RETURN 0
    END IF

    WHILE FSCANF(userdb, "%s %s", user, pass) IS 2
        IF STRCMP(username, user) IS 0 AND STRCMP(password, pass) IS 0 THEN
            FCLOSE(userdb)
            RETURN 1
        END IF
    END WHILE
    FCLOSE(userdb)
    RETURN 0
END PROCEDURE

PROCEDURE addToMenu
    CHAR new_item_name[MAX_ITEM_NAME_LENGTH]
    INT new_item_price
    INT new_item_quantity
    STRUCT MenuItem new_item

    PRINT("What would you like to add to the menu?")
    INPUT(new_item_name)

    PRINT("What is the price of this item?")
    INPUT(new_item_price)
    IF NOT CALL FUNCTION isValidInt WITH ARGUMENT new_item_price THEN
        PRINT("Invalid price input. Please enter a valid integer.")
        RETURN
    END IF
    new_item.price = CONVERT TO INTEGER(new_item_price)

    PRINT("How much of this item are you adding?")
    INPUT(new_item_quantity)
    IF NOT CALL FUNCTION isValidInt WITH ARGUMENT new_item_quantity THEN
        PRINT("Invalid quantity input. Please enter a valid integer.")
        RETURN
    END IF
    new_item.quantity = CONVERT TO INTEGER(new_item_quantity)

    PRINT("Added " + new_item.quantity + " of item " + new_item.name + " to menu")

    menudb = FOPEN("F:/projects/compsci/db/menu.txt", "a")
    FPRINTF(menudb, "%s %d %d", new_item.name, new_item.price, new_item.quantity)
    FCLOSE(menudb)
END PROCEDURE

PROCEDURE searchMenu
    CHAR i_searchPrefix[MAX_ITEM_NAME_LENGTH]
    INT matchCount = 0

    PRINT("Enter search prefix")
    INPUT(i_searchPrefix)

    menudb = FOPEN("F:/projects/compsci/db/menu.txt", "r")
    IF menudb IS NULL THEN
        PRINT("Error opening menu file")
        RETURN -1 // Indicate failure
    END IF

    STRUCT MenuItem menu_item

    WHILE FSCANF(menudb, "%19s %d %d", menu_item.name, &menu_item.price, &menu_item.quantity) IS 3
        IF STRNCMP(menu_item.name, i_searchPrefix, LENGTH OF i_searchPrefix) IS 0 THEN
            PRINT("Item: " + menu_item.name + ", Price: $" + menu_item.price + ", Quantity: " + menu_item.quantity)
            matchCount++
        END IF
    END WHILE

    FCLOSE(menudb)

    RETURN matchCount
    
END PROCEDURE

PROCEDURE sellItem
    CHAR sold_item_name[MAX_ITEM_NAME_LENGTH]
    INT sold_item_quantity
    STRUCT MenuItem menu_item
    STRUCT SalesRecord sold_item

    PRINT("What item does the student want to purchase?")
    INPUT(sold_item_name)

    menudb = FOPEN("F:/projects/compsci/db/menu.txt", "r")
    IF menudb IS NULL THEN
        PRINT("Error opening menu file")
        RETURN
    END IF

    // Check if the item is in the menu
    INT itemFound = 0
    WHILE FSCANF(menudb, "%19s %d %d", menu_item.name, &menu_item.price, &menu_item.quantity) IS 3
        IF STRCMP(menu_item.name, sold_item_name) IS 0 THEN
            itemFound = 1
            BREAK
        END IF
    END WHILE

    FCLOSE(menudb)

    IF NOT itemFound THEN
        PRINT("Item not found in the menu.")
        RETURN
    END IF

    PRINT("How many of these are you selling?")
    INPUT(sold_item_quantity)
    IF NOT CALL FUNCTION isValidInt WITH ARGUMENT sold_item_quantity THEN
        PRINT("Invalid quantity input. Please enter a valid integer.")
        RETURN
    END IF
    sold_item.quantity = CONVERT TO INTEGER(sold_item_quantity)

    IF sold_item.quantity <= 0 THEN
        PRINT("Invalid quantity.")
        RETURN
    END IF

    // Check if there is enough stock
    IF menu_item.quantity < sold_item.quantity THEN
        PRINT("Not enough stock available for " + sold_item_name + ".")
        RETURN
    END IF

    // Deduct from the stock
    INT new_item_quantity = menu_item.quantity - sold_item.quantity

    // Update the menu file with the new stock
    menudb = FOPEN("F:/projects/compsci/db/menu.txt", "r")
    FILE *tempdb = FOPEN("F:/projects/compsci/db/temp_menu.txt", "w")

    WHILE FSCANF(menudb, "%19s %d %d", menu_item.name, &menu_item.price, &menu_item.quantity) IS 3
        IF STRCMP(menu_item.name, sold_item_name) IS 0 THEN
            FPRINTF(tempdb, "%s %d %d\n", menu_item.name, menu_item.price, new_item_quantity)
        ELSE
            FPRINTF(tempdb, "%s %d %d\n", menu_item.name, menu_item.price, menu_item.quantity)
        END IF
    END WHILE

    FCLOSE(menudb)
    FCLOSE(tempdb)

    REMOVE("F:/projects/compsci/db/menu.txt")
    RENAME("F:/projects/compsci/db/temp_menu.txt", "F:/projects/compsci/db/menu.txt")

    // Add the sale to the sales records
    FILE *counterdb = FOPEN("F:/projects/compsci/db/sales.txt", "a")
    FPRINTF(counterdb, "%s %d %d\n", sold_item_name, menu_item.price, sold_item.quantity)
    FCLOSE(counterdb)

    PRINT("Sale recorded successfully.")
END PROCEDURE

PROCEDURE calculateSoldItem
    STRUCT SalesRecord sold_item

    FILE* counterdb = FOPEN("F:/projects/compsci/db/sales.txt", "r")
    IF counterdb IS NULL THEN
        PRINT("Error opening sales file")
        RETURN
    END IF

    // Use arrays to store information for each unique item
    CHAR items[100][50]
    INT quantities[100] = {0} // Initialize quantities to zero
    INT prices[100]
    INT count = 0

    WHILE FSCANF(counterdb, "%s %d %d", sold_item.item, &sold_item.price, &sold_item.quantity) IS 3
        INT index = -1

        // Check if the item is already in the array
        FOR INT i = 0 TO count - 1
            IF STRCMP(items[i], sold_item.item) IS 0 THEN
                index = i
                BREAK
            END IF
        END FOR

        // If the item is not in the array, add it
        IF index IS -1 THEN
            STRCPY(items[count], sold_item.item)
            quantities[count] = sold_item.quantity
            prices[count] = sold_item.price
            count++
        ELSE
            // If the item is already in the array, update the quantity
            quantities[index] += sold_item.quantity
        END IF
    END WHILE

    FCLOSE(counterdb)

    // Print the consolidated information
    FOR INT i = 0 TO count - 1
        INT money_made = prices[i] * quantities[i]
        PRINT("Item: " + items[i] + ", Price per unit: $" + prices[i] + ", Total Quantity: " + quantities[i] + ", Total Money made from item: $" + money_made)
    END FOR
END PROCEDURE
